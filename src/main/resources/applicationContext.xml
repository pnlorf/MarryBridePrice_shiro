<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/cache
       http://www.springframework.org/schema/cache/spring-cache.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task.xsd"
       default-lazy-init="true">
    <!--定时器开关开始-->
    <task:annotation-driven/>

    <mvc:annotation-driven />

    <context:annotation-config/>

    <!--自动扫描包，将带有注解的类纳入spring容器管理-->
    <context:component-scan base-package="com.pnlorf"></context:component-scan>

    <!-- 标注类型 的事务配置 如果使用注解事务。就放开
    <tx:annotation-driven />-->

    <!-- 统一异常处理方式 -->
    <bean id="exceptionHandler" class="com.pnlorf.exception.PnlorfExceptionHandler"/>

    <!--引入配置文件-->
    <context:property-placeholder location="classpath*:jdbc.properties"></context:property-placeholder>

    <!--数据源dataSource配置-->
    <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
        <!--基本属性:url, username, password-->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClassName" value="${jdbc.driverClassName}"/>

        <!--配置初始化大小、最小、最大-->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="maxIdle" value="${jdbc.maxIdle}" />

        <!--配置获取连接等待超时的时间-->
        <property name="maxWait" value="${jdbc.maxWait}"/>

        <!--配置间隔多久才进行一次监测，监测需要关闭的空闲连接，单位是毫秒-->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>

        <!--配置一个连接在池中最小生存的时间，单位是毫秒-->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="${jdbc.validationQuery}"/>
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
        <property name="testOnReturn" value="${jdbc.testOnReturn}"/>

        <!--打开PSCache，并且指定每个连接上PSCache的大小，tomcat jdbc不支持-->
        <!--<property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}"/>
        <property name="maxOpenPreparedStatements" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}"/>-->

        <!-- 配置监控统计拦截的filters -->
        <!--<property name="filters" value="stat"/>-->
    </bean>

    <bean id="pagePlugin" class="com.pnlorf.plugin.PagePlugin">
        <property name="properties">
            <props>
                <prop key="dialect">mysql</prop>
                <prop key="pageSqlId">*query*</prop>
            </props>
        </property>
    </bean>

    <!--Mybatis文件配置，扫描所有mapper文件-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath*:com/pnlorf/mapper/*.xml"/>
        <property name="plugins">
            <array>
                <ref bean="pagePlugin"/>
            </array>
        </property>
    </bean>

    <!--spring与mybatis整合配置，扫描所有mapper-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.pnlorf.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 对dataSource 数据源进行事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--事务管理 通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--对insert、update、delete开头的方法进行事务管理，只要有异常就回滚-->
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <!--select、count、开头的方法，开启只读，提高数据库访问性能-->
            <tx:method name="select*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>
            <!--对其他方法，使用默认的事务管理-->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!--事务aop配置-->
    <aop:config>
        <aop:pointcut id="serviceMethods" expression="execution(* com.pnlorf.service..*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
    </aop:config>

    <!--配置使Spring采用CGLIB代理-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--启用对事物注解的支持-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--Cache配置-->
<!--    <cache:annotation-driven cache-manager="cacheManager"/>

    <bean id="ehCacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache.xml"/>
    </bean>

    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehCacheManagerFactory"/>
    </bean>-->

    <!--隐式地向Spring容器注册-->
    <context:annotation-config/>
</beans>